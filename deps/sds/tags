!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
SDS_HDR	sds.h	83;"	d
SDS_HDR_VAR	sds.h	82;"	d
SDS_LLSTR_SIZE	sds.c	431;"	d	file:
SDS_MAX_PREALLOC	sds.h	36;"	d
SDS_TYPE_16	sds.h	77;"	d
SDS_TYPE_32	sds.h	78;"	d
SDS_TYPE_5	sds.h	75;"	d
SDS_TYPE_5_LEN	sds.h	84;"	d
SDS_TYPE_64	sds.h	79;"	d
SDS_TYPE_8	sds.h	76;"	d
SDS_TYPE_BITS	sds.h	81;"	d
SDS_TYPE_MASK	sds.h	80;"	d
UNUSED	sds.c	1108;"	d	file:
__SDS_H	sds.h	34;"	d
__failed_tests	sds.h	/^int __failed_tests = 0;$/;"	v
__test_num	sds.h	/^int __test_num = 0;$/;"	v
alloc	sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr16
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr32
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr5
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr64
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr8
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
len	sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16
len	sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32
len	sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64
len	sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8
main	sds.c	/^int main(void) {$/;"	f
s_free	sds.h	275;"	d
s_malloc	sds.h	273;"	d
s_realloc	sds.h	274;"	d
sds	sds.h	/^typedef char *sds;$/;"	t
sdsAllocPtr	sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsHdrSize	sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	file:
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsReqType	sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	file:
sdsTest	sds.c	/^int sdsTest(void) {$/;"	f
sds_free	sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f
sds_malloc	sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f
sds_realloc	sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f
sdsalloc	sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatfmt	sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr16	sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f
sdsjoinsds	sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsll2str	sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdssetalloc	sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsull2str	sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
test_cond	sds.h	280;"	d
test_report	sds.h	284;"	d
